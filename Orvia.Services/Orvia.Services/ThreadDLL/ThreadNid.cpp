#include "pch.h"

#include "ThreadNid.h"

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////// Periph //////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////

ThreadNid::ThreadNid(   std::string  _deviceBalance ,
						std::string  _deviceRFID	,
						int			 _baud			,
						int			 _nbDataBits	,
						int			 _parity		,
						int			 _nbStopBits	,

						std::string  _SNAntenne		,
						std::string  _SNBalance		,

						double       _minPoidsOeuf  ,
						double       _maxPoidsOeuf  ,
						double       _minPoidsPoule ,
						double       _maxPoidsPoule ,

						int			_debug			,
						std::string _pathDebugFile		)
{

	debugMode     = _debug;
	pathDebugFile = _pathDebugFile;

	nid    = new Nid(   _deviceBalance, _deviceRFID, _baud, _nbDataBits, _parity, _nbStopBits, 
						_SNAntenne, _SNBalance, _minPoidsOeuf, _maxPoidsOeuf, _minPoidsPoule, _maxPoidsPoule, _debug, _pathDebugFile  );

	statut = Etat::SOMMEIL;

	t      = std::thread(&ThreadNid::Execute, this);

	if (debugMode == 1) {

		WriteInDebugFile("*********** CONSTRUCTION THREAD NID ***********", pathDebugFile);

		char buffer[STR_SIZE];

		snprintf(buffer, STR_SIZE, "|CONSTRUCTION| ThreadNid deviceBalance : %s, deviceRFID : %s, baudrate : %i, nbDataBits : %i, parity : %i, nbStopBits : %i, SN Balance : %s, SN RFID : %s, Min poids oeuf : %d, Max poids oeuf : %d, Min poids poule : %d, Max poids poule : %d \n ", 
						 _deviceBalance.c_str(), _deviceRFID.c_str(), _baud, _nbDataBits, _parity, _nbStopBits, _SNBalance.c_str(), _SNAntenne.c_str(),
						 _minPoidsOeuf, _maxPoidsOeuf, _minPoidsPoule, _maxPoidsPoule);

		WriteInDebugFile(buffer, pathDebugFile);

	}

}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////// ~ThreadNid //////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////

ThreadNid::~ThreadNid()
{

	t.join();

	delete nid;

	if (debugMode == 1) WriteInDebugFile("*********** DESTRUCTION THREAD NID ***********", pathDebugFile);

}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////// Execute /////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////

void ThreadNid::Execute()
{

	int ret = 0;

	if (debugMode == 1) WriteInDebugFile("*********** LANCEMENT THREAD NID ***********", pathDebugFile);

	while (threadTerminate == true)
	{

		while (threadStop == false)
		{

			ret = nid->refresh(&sError);

			switch (ret) {

				case -1 : statut = Etat::ERREUR  ; threadStop = true  ; break;
				case 0  : statut = Etat::SOMMEIL ; threadStop = true  ; break;
				case 1  : statut = Etat::MARCHE					      ; break;

			}

			std::this_thread::sleep_for(std::chrono::milliseconds(100));

		}

		std::this_thread::sleep_for(std::chrono::milliseconds(1000));

	}

}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////// WakeUpThread //////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////

int ThreadNid::WakeUpThread()
{

	int ret = nid->PalmiOnBalance(&sError);

	switch (ret) {

		case -1 : statut = Etat::ERREUR  ; break;
		case 0  : statut = Etat::SOMMEIL ; break;
		case 1  : statut = Etat::MARCHE  ; break;

	}

	if (statut == Etat::MARCHE)
		threadStop = false;

	if (debugMode == 1) {

		char buffer[STR_SIZE];

		snprintf(buffer, STR_SIZE, "ThreadNid::WakeUpThread ret = %i", ret);

		WriteInDebugFile(buffer, pathDebugFile);

	}

	return ret;

}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////// Terminate //////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////

void ThreadNid::Terminate()
{

	threadStop      = false;
	threadTerminate = true;

	if (debugMode == 1) WriteInDebugFile("*********** FIN THREAD NID ***********", pathDebugFile);

}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////// getStatut //////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////

int ThreadNid::getStatut()
{

	int ret = 0;

	switch (statut) {

		case  Etat::ERREUR  :  ret = -1 ; break;
		case  Etat::SOMMEIL :  ret = 0  ; break;
		case  Etat::MARCHE  :  ret = 1  ; break;

	}

	if (debugMode == 1) {

		char buffer[STR_SIZE];

		snprintf(buffer, STR_SIZE, "ThreadNid::getStatut ret = %i", ret);

		WriteInDebugFile(buffer, pathDebugFile);

	}

	return ret;

}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////// getError //////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////

const char*  ThreadNid::getError()
{

	if (debugMode == 1) {

		char buffer[STR_SIZE];

		snprintf(buffer, STR_SIZE, "ThreadNid::getError error = %s", sError.c_str());

		WriteInDebugFile(buffer, pathDebugFile);

	}

	return sError.c_str();

}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////// getNbOeuf //////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////

int ThreadNid::getNbOeuf()
{

	if (debugMode == 1) {

		char buffer[STR_SIZE];

		snprintf(buffer, STR_SIZE, "ThreadNid::getNbOeuf nb = %i", nid->getNbOeuf());

		WriteInDebugFile(buffer, pathDebugFile);

	}

	return nid->getNbOeuf();

}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////// getPontes //////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////

int ThreadNid::getPontes(char ***pontes)
{

	std::list< std::list<std::string> > allPontes;

	int nbColonne;
	int nbLigne;

	int ret;

	ret = nid->getPontes(&allPontes);

	if(ret <=0) return 0;

	nbLigne   = allPontes.size();

	/* Allocate 1d dimension */
	pontes = (char***) malloc(sizeof(char**) * nbLigne);

	/* Allocate 2d dimension */
	for (int i = 0; i < nbLigne; i++) {
		pontes[i] = (char**)malloc(sizeof(char**) * 3);
	}

	if (debugMode == 1) {

		char buffer[STR_SIZE];

		snprintf(buffer, STR_SIZE, "ThreadNid::getPontes ret = %i", ret);

		WriteInDebugFile(buffer, pathDebugFile);

	}

	return ret;

}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////